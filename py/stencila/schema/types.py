# This file was automatically generated by `python.ts`.
# Do not modify it by hand. Instead, modify the source `.schema.yaml` files
# in the `schema` directory and run `npm run build:py` to regenerate it.

from typing import Any, Dict, List as Array, Optional, Union
from enum import Enum

ECitationMode = Enum("CitationMode", ["normal", "suppressAuthor"])

EItemListOrder = Enum("ItemListOrder", ["ascending", "descending", "unordered"])

ETableCellKind = Enum("TableCellKind", ["data", "header"])

ETableRowKind = Enum("TableRowKind", ["header", "footer"])


class Entity:
    """The most basic item, defining the minimum properties required."""

    id: Optional[str] = None
    meta: Optional[Dict[str, Any]] = None

    def __init__(
        self,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(

        )
        if id is not None:
            self.id = id
        if meta is not None:
            self.meta = meta


class ArraySchema(Entity):
    """A schema specifying constraints on an array node."""

    contains: Optional["SchemaTypes"] = None
    items: Optional["SchemaTypes"] = None
    maxItems: Optional[float] = None
    minItems: Optional[float] = None
    uniqueItems: Optional[bool] = None

    def __init__(
        self,
        contains: Optional["SchemaTypes"] = None,
        id: Optional[str] = None,
        items: Optional["SchemaTypes"] = None,
        maxItems: Optional[float] = None,
        meta: Optional[Dict[str, Any]] = None,
        minItems: Optional[float] = None,
        uniqueItems: Optional[bool] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if contains is not None:
            self.contains = contains
        if items is not None:
            self.items = items
        if maxItems is not None:
            self.maxItems = maxItems
        if minItems is not None:
            self.minItems = minItems
        if uniqueItems is not None:
            self.uniqueItems = uniqueItems


class BooleanSchema(Entity):
    """A schema specifying that a node must be a boolean value."""

    def __init__(
        self,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )



class Cite(Entity):
    """A reference to a CreativeWork that is cited in another CreativeWork."""

    target: str
    citationMode: Optional["ECitationMode"] = None
    pageEnd: Optional[Union[str, int]] = None
    pageStart: Optional[Union[str, int]] = None
    pagination: Optional[str] = None
    prefix: Optional[str] = None
    suffix: Optional[str] = None

    def __init__(
        self,
        target: str,
        citationMode: Optional["ECitationMode"] = None,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
        pageEnd: Optional[Union[str, int]] = None,
        pageStart: Optional[Union[str, int]] = None,
        pagination: Optional[str] = None,
        prefix: Optional[str] = None,
        suffix: Optional[str] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if target is not None:
            self.target = target
        if citationMode is not None:
            self.citationMode = citationMode
        if pageEnd is not None:
            self.pageEnd = pageEnd
        if pageStart is not None:
            self.pageStart = pageStart
        if pagination is not None:
            self.pagination = pagination
        if prefix is not None:
            self.prefix = prefix
        if suffix is not None:
            self.suffix = suffix


class CiteGroup(Entity):
    """A group of `Cite` nodes"""

    items: Array["Cite"]

    def __init__(
        self,
        items: Array["Cite"],
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if items is not None:
            self.items = items


class Code(Entity):
    """Inline code."""

    text: str
    language: Optional[str] = None

    def __init__(
        self,
        text: str,
        id: Optional[str] = None,
        language: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if text is not None:
            self.text = text
        if language is not None:
            self.language = language


class CodeBlock(Code):
    """A code block."""

    def __init__(
        self,
        text: str,
        id: Optional[str] = None,
        language: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            text=text,
            id=id,
            language=language,
            meta=meta
        )



class CodeChunk(CodeBlock):
    """A executable chunk of code."""

    alters: Optional[Array[str]] = None
    assigns: Optional[Array[Union[str, "Variable"]]] = None
    declares: Optional[Array[Union[str, "Variable", "Function"]]] = None
    duration: Optional[float] = None
    errors: Optional[Array["CodeError"]] = None
    imports: Optional[Array[Union[str, "SoftwareSourceCode", "SoftwareApplication"]]] = None
    outputs: Optional[Array["Node"]] = None
    reads: Optional[Array[str]] = None
    uses: Optional[Array[Union[str, "Variable"]]] = None

    def __init__(
        self,
        text: str,
        alters: Optional[Array[str]] = None,
        assigns: Optional[Array[Union[str, "Variable"]]] = None,
        declares: Optional[Array[Union[str, "Variable", "Function"]]] = None,
        duration: Optional[float] = None,
        errors: Optional[Array["CodeError"]] = None,
        id: Optional[str] = None,
        imports: Optional[Array[Union[str, "SoftwareSourceCode", "SoftwareApplication"]]] = None,
        language: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
        outputs: Optional[Array["Node"]] = None,
        reads: Optional[Array[str]] = None,
        uses: Optional[Array[Union[str, "Variable"]]] = None
    ) -> None:
        super().__init__(
            text=text,
            id=id,
            language=language,
            meta=meta
        )
        if alters is not None:
            self.alters = alters
        if assigns is not None:
            self.assigns = assigns
        if declares is not None:
            self.declares = declares
        if duration is not None:
            self.duration = duration
        if errors is not None:
            self.errors = errors
        if imports is not None:
            self.imports = imports
        if outputs is not None:
            self.outputs = outputs
        if reads is not None:
            self.reads = reads
        if uses is not None:
            self.uses = uses


class CodeFragment(Code):
    """Inline code."""

    def __init__(
        self,
        text: str,
        id: Optional[str] = None,
        language: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            text=text,
            id=id,
            language=language,
            meta=meta
        )



class CodeExpression(CodeFragment):
    """An expression defined in programming language source code."""

    errors: Optional[Array["CodeError"]] = None
    output: Optional["Node"] = None

    def __init__(
        self,
        text: str,
        errors: Optional[Array["CodeError"]] = None,
        id: Optional[str] = None,
        language: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
        output: Optional["Node"] = None
    ) -> None:
        super().__init__(
            text=text,
            id=id,
            language=language,
            meta=meta
        )
        if errors is not None:
            self.errors = errors
        if output is not None:
            self.output = output


class CodeError(Entity):
    """An error that occured when parsing, compiling or executing some Code."""

    kind: str
    message: Optional[str] = None
    trace: Optional[str] = None

    def __init__(
        self,
        kind: str,
        id: Optional[str] = None,
        message: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
        trace: Optional[str] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if kind is not None:
            self.kind = kind
        if message is not None:
            self.message = message
        if trace is not None:
            self.trace = trace


class ConstantSchema(Entity):
    """A schema specifying a constant value that a node must have."""

    value: Optional["Node"] = None

    def __init__(
        self,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
        value: Optional["Node"] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if value is not None:
            self.value = value


class Mark(Entity):
    """
    A base class for nodes that mark some other inline content in some way
    (e.g. as being emphasised, or quoted).
    """

    content: Array["InlineContent"]

    def __init__(
        self,
        content: Array["InlineContent"],
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if content is not None:
            self.content = content


class Delete(Mark):
    """Content that is marked for deletion"""

    def __init__(
        self,
        content: Array["InlineContent"],
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            content=content,
            id=id,
            meta=meta
        )



class Emphasis(Mark):
    """Emphasised content."""

    def __init__(
        self,
        content: Array["InlineContent"],
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            content=content,
            id=id,
            meta=meta
        )



class Thing(Entity):
    """The most generic type of item."""

    alternateNames: Optional[Array[str]] = None
    description: Optional[str] = None
    name: Optional[str] = None
    url: Optional[str] = None

    def __init__(
        self,
        alternateNames: Optional[Array[str]] = None,
        description: Optional[str] = None,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        url: Optional[str] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if alternateNames is not None:
            self.alternateNames = alternateNames
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url


class Brand(Thing):
    """
    A brand used by an organization or person for labeling a product, product
    group, or similar.
    """

    name: str
    logo: Optional[Union[str, "ImageObject"]] = None
    reviews: Optional[Array[str]] = None

    def __init__(
        self,
        name: str,
        alternateNames: Optional[Array[str]] = None,
        description: Optional[str] = None,
        id: Optional[str] = None,
        logo: Optional[Union[str, "ImageObject"]] = None,
        meta: Optional[Dict[str, Any]] = None,
        reviews: Optional[Array[str]] = None,
        url: Optional[str] = None
    ) -> None:
        super().__init__(
            name=name,
            alternateNames=alternateNames,
            description=description,
            id=id,
            meta=meta,
            url=url
        )
        if name is not None:
            self.name = name
        if logo is not None:
            self.logo = logo
        if reviews is not None:
            self.reviews = reviews


class ContactPoint(Thing):
    """A contact point—for example, a R&D department."""

    availableLanguages: Optional[Array[str]] = None
    emails: Optional[Array[str]] = None
    telephone: Optional[str] = None

    def __init__(
        self,
        alternateNames: Optional[Array[str]] = None,
        availableLanguages: Optional[Array[str]] = None,
        description: Optional[str] = None,
        emails: Optional[Array[str]] = None,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        telephone: Optional[str] = None,
        url: Optional[str] = None
    ) -> None:
        super().__init__(
            alternateNames=alternateNames,
            description=description,
            id=id,
            meta=meta,
            name=name,
            url=url
        )
        if availableLanguages is not None:
            self.availableLanguages = availableLanguages
        if emails is not None:
            self.emails = emails
        if telephone is not None:
            self.telephone = telephone


class CreativeWork(Thing):
    """
    A creative work, including books, movies, photographs, software programs,
    etc.
    """

    authors: Optional[Array[Union["Person", "Organization"]]] = None
    content: Optional[Array["Node"]] = None
    dateCreated: Optional[str] = None
    dateModified: Optional[str] = None
    datePublished: Optional[str] = None
    editors: Optional[Array["Person"]] = None
    funders: Optional[Array[Union["Person", "Organization"]]] = None
    isPartOf: Optional["CreativeWorkTypes"] = None
    licenses: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None
    parts: Optional[Array["CreativeWorkTypes"]] = None
    publisher: Optional[Union["Person", "Organization"]] = None
    references: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None
    text: Optional[str] = None
    title: Optional[str] = None
    version: Optional[Union[str, float]] = None

    def __init__(
        self,
        alternateNames: Optional[Array[str]] = None,
        authors: Optional[Array[Union["Person", "Organization"]]] = None,
        content: Optional[Array["Node"]] = None,
        dateCreated: Optional[str] = None,
        dateModified: Optional[str] = None,
        datePublished: Optional[str] = None,
        description: Optional[str] = None,
        editors: Optional[Array["Person"]] = None,
        funders: Optional[Array[Union["Person", "Organization"]]] = None,
        id: Optional[str] = None,
        isPartOf: Optional["CreativeWorkTypes"] = None,
        licenses: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        parts: Optional[Array["CreativeWorkTypes"]] = None,
        publisher: Optional[Union["Person", "Organization"]] = None,
        references: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        text: Optional[str] = None,
        title: Optional[str] = None,
        url: Optional[str] = None,
        version: Optional[Union[str, float]] = None
    ) -> None:
        super().__init__(
            alternateNames=alternateNames,
            description=description,
            id=id,
            meta=meta,
            name=name,
            url=url
        )
        if authors is not None:
            self.authors = authors
        if content is not None:
            self.content = content
        if dateCreated is not None:
            self.dateCreated = dateCreated
        if dateModified is not None:
            self.dateModified = dateModified
        if datePublished is not None:
            self.datePublished = datePublished
        if editors is not None:
            self.editors = editors
        if funders is not None:
            self.funders = funders
        if isPartOf is not None:
            self.isPartOf = isPartOf
        if licenses is not None:
            self.licenses = licenses
        if parts is not None:
            self.parts = parts
        if publisher is not None:
            self.publisher = publisher
        if references is not None:
            self.references = references
        if text is not None:
            self.text = text
        if title is not None:
            self.title = title
        if version is not None:
            self.version = version


class Article(CreativeWork):
    """An article, including news and scholarly articles."""

    authors: Array[Union["Person", "Organization"]]
    title: str
    environment: Optional["Environment"] = None

    def __init__(
        self,
        authors: Array[Union["Person", "Organization"]],
        title: str,
        alternateNames: Optional[Array[str]] = None,
        content: Optional[Array["Node"]] = None,
        dateCreated: Optional[str] = None,
        dateModified: Optional[str] = None,
        datePublished: Optional[str] = None,
        description: Optional[str] = None,
        editors: Optional[Array["Person"]] = None,
        environment: Optional["Environment"] = None,
        funders: Optional[Array[Union["Person", "Organization"]]] = None,
        id: Optional[str] = None,
        isPartOf: Optional["CreativeWorkTypes"] = None,
        licenses: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        parts: Optional[Array["CreativeWorkTypes"]] = None,
        publisher: Optional[Union["Person", "Organization"]] = None,
        references: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        text: Optional[str] = None,
        url: Optional[str] = None,
        version: Optional[Union[str, float]] = None
    ) -> None:
        super().__init__(
            authors=authors,
            title=title,
            alternateNames=alternateNames,
            content=content,
            dateCreated=dateCreated,
            dateModified=dateModified,
            datePublished=datePublished,
            description=description,
            editors=editors,
            funders=funders,
            id=id,
            isPartOf=isPartOf,
            licenses=licenses,
            meta=meta,
            name=name,
            parts=parts,
            publisher=publisher,
            references=references,
            text=text,
            url=url,
            version=version
        )
        if authors is not None:
            self.authors = authors
        if title is not None:
            self.title = title
        if environment is not None:
            self.environment = environment


class Collection(CreativeWork):
    """A created collection of CreativeWorks or other artefacts."""

    parts: Array["CreativeWorkTypes"]

    def __init__(
        self,
        parts: Array["CreativeWorkTypes"],
        alternateNames: Optional[Array[str]] = None,
        authors: Optional[Array[Union["Person", "Organization"]]] = None,
        content: Optional[Array["Node"]] = None,
        dateCreated: Optional[str] = None,
        dateModified: Optional[str] = None,
        datePublished: Optional[str] = None,
        description: Optional[str] = None,
        editors: Optional[Array["Person"]] = None,
        funders: Optional[Array[Union["Person", "Organization"]]] = None,
        id: Optional[str] = None,
        isPartOf: Optional["CreativeWorkTypes"] = None,
        licenses: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        publisher: Optional[Union["Person", "Organization"]] = None,
        references: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        text: Optional[str] = None,
        title: Optional[str] = None,
        url: Optional[str] = None,
        version: Optional[Union[str, float]] = None
    ) -> None:
        super().__init__(
            parts=parts,
            alternateNames=alternateNames,
            authors=authors,
            content=content,
            dateCreated=dateCreated,
            dateModified=dateModified,
            datePublished=datePublished,
            description=description,
            editors=editors,
            funders=funders,
            id=id,
            isPartOf=isPartOf,
            licenses=licenses,
            meta=meta,
            name=name,
            publisher=publisher,
            references=references,
            text=text,
            title=title,
            url=url,
            version=version
        )
        if parts is not None:
            self.parts = parts


class Datatable(CreativeWork):
    """A table of data."""

    columns: Array["DatatableColumn"]

    def __init__(
        self,
        columns: Array["DatatableColumn"],
        alternateNames: Optional[Array[str]] = None,
        authors: Optional[Array[Union["Person", "Organization"]]] = None,
        content: Optional[Array["Node"]] = None,
        dateCreated: Optional[str] = None,
        dateModified: Optional[str] = None,
        datePublished: Optional[str] = None,
        description: Optional[str] = None,
        editors: Optional[Array["Person"]] = None,
        funders: Optional[Array[Union["Person", "Organization"]]] = None,
        id: Optional[str] = None,
        isPartOf: Optional["CreativeWorkTypes"] = None,
        licenses: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        parts: Optional[Array["CreativeWorkTypes"]] = None,
        publisher: Optional[Union["Person", "Organization"]] = None,
        references: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        text: Optional[str] = None,
        title: Optional[str] = None,
        url: Optional[str] = None,
        version: Optional[Union[str, float]] = None
    ) -> None:
        super().__init__(
            alternateNames=alternateNames,
            authors=authors,
            content=content,
            dateCreated=dateCreated,
            dateModified=dateModified,
            datePublished=datePublished,
            description=description,
            editors=editors,
            funders=funders,
            id=id,
            isPartOf=isPartOf,
            licenses=licenses,
            meta=meta,
            name=name,
            parts=parts,
            publisher=publisher,
            references=references,
            text=text,
            title=title,
            url=url,
            version=version
        )
        if columns is not None:
            self.columns = columns


class MediaObject(CreativeWork):
    """
    A media object, such as an image, video, or audio object embedded in a web
    page or a downloadable dataset.
    """

    contentUrl: str
    bitrate: Optional[float] = None
    contentSize: Optional[float] = None
    embedUrl: Optional[str] = None
    format: Optional[str] = None

    def __init__(
        self,
        contentUrl: str,
        alternateNames: Optional[Array[str]] = None,
        authors: Optional[Array[Union["Person", "Organization"]]] = None,
        bitrate: Optional[float] = None,
        content: Optional[Array["Node"]] = None,
        contentSize: Optional[float] = None,
        dateCreated: Optional[str] = None,
        dateModified: Optional[str] = None,
        datePublished: Optional[str] = None,
        description: Optional[str] = None,
        editors: Optional[Array["Person"]] = None,
        embedUrl: Optional[str] = None,
        format: Optional[str] = None,
        funders: Optional[Array[Union["Person", "Organization"]]] = None,
        id: Optional[str] = None,
        isPartOf: Optional["CreativeWorkTypes"] = None,
        licenses: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        parts: Optional[Array["CreativeWorkTypes"]] = None,
        publisher: Optional[Union["Person", "Organization"]] = None,
        references: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        text: Optional[str] = None,
        title: Optional[str] = None,
        url: Optional[str] = None,
        version: Optional[Union[str, float]] = None
    ) -> None:
        super().__init__(
            alternateNames=alternateNames,
            authors=authors,
            content=content,
            dateCreated=dateCreated,
            dateModified=dateModified,
            datePublished=datePublished,
            description=description,
            editors=editors,
            funders=funders,
            id=id,
            isPartOf=isPartOf,
            licenses=licenses,
            meta=meta,
            name=name,
            parts=parts,
            publisher=publisher,
            references=references,
            text=text,
            title=title,
            url=url,
            version=version
        )
        if contentUrl is not None:
            self.contentUrl = contentUrl
        if bitrate is not None:
            self.bitrate = bitrate
        if contentSize is not None:
            self.contentSize = contentSize
        if embedUrl is not None:
            self.embedUrl = embedUrl
        if format is not None:
            self.format = format


class AudioObject(MediaObject):
    """An audio file"""

    caption: Optional[str] = None
    transcript: Optional[str] = None

    def __init__(
        self,
        contentUrl: str,
        alternateNames: Optional[Array[str]] = None,
        authors: Optional[Array[Union["Person", "Organization"]]] = None,
        bitrate: Optional[float] = None,
        caption: Optional[str] = None,
        content: Optional[Array["Node"]] = None,
        contentSize: Optional[float] = None,
        dateCreated: Optional[str] = None,
        dateModified: Optional[str] = None,
        datePublished: Optional[str] = None,
        description: Optional[str] = None,
        editors: Optional[Array["Person"]] = None,
        embedUrl: Optional[str] = None,
        format: Optional[str] = None,
        funders: Optional[Array[Union["Person", "Organization"]]] = None,
        id: Optional[str] = None,
        isPartOf: Optional["CreativeWorkTypes"] = None,
        licenses: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        parts: Optional[Array["CreativeWorkTypes"]] = None,
        publisher: Optional[Union["Person", "Organization"]] = None,
        references: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        text: Optional[str] = None,
        title: Optional[str] = None,
        transcript: Optional[str] = None,
        url: Optional[str] = None,
        version: Optional[Union[str, float]] = None
    ) -> None:
        super().__init__(
            contentUrl=contentUrl,
            alternateNames=alternateNames,
            authors=authors,
            bitrate=bitrate,
            content=content,
            contentSize=contentSize,
            dateCreated=dateCreated,
            dateModified=dateModified,
            datePublished=datePublished,
            description=description,
            editors=editors,
            embedUrl=embedUrl,
            format=format,
            funders=funders,
            id=id,
            isPartOf=isPartOf,
            licenses=licenses,
            meta=meta,
            name=name,
            parts=parts,
            publisher=publisher,
            references=references,
            text=text,
            title=title,
            url=url,
            version=version
        )
        if caption is not None:
            self.caption = caption
        if transcript is not None:
            self.transcript = transcript


class DatatableColumn(Thing):
    """A column of data within a Datatable."""

    name: str
    values: Array[Any]
    schema: Optional["ArraySchema"] = None

    def __init__(
        self,
        name: str,
        values: Array[Any],
        alternateNames: Optional[Array[str]] = None,
        description: Optional[str] = None,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
        schema: Optional["ArraySchema"] = None,
        url: Optional[str] = None
    ) -> None:
        super().__init__(
            name=name,
            alternateNames=alternateNames,
            description=description,
            id=id,
            meta=meta,
            url=url
        )
        if name is not None:
            self.name = name
        if values is not None:
            self.values = values
        if schema is not None:
            self.schema = schema


class EnumSchema(Entity):
    """A schema specifying that a node must be one of several values."""

    values: Optional[Array["Node"]] = None

    def __init__(
        self,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
        values: Optional[Array["Node"]] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if values is not None:
            self.values = values


class Environment(Thing):
    """A computational environment."""

    name: str
    adds: Optional[Array["SoftwareSourceCode"]] = None
    extends: Optional[Array["Environment"]] = None
    removes: Optional[Array["SoftwareSourceCode"]] = None
    source: Optional[str] = None

    def __init__(
        self,
        name: str,
        adds: Optional[Array["SoftwareSourceCode"]] = None,
        alternateNames: Optional[Array[str]] = None,
        description: Optional[str] = None,
        extends: Optional[Array["Environment"]] = None,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
        removes: Optional[Array["SoftwareSourceCode"]] = None,
        source: Optional[str] = None,
        url: Optional[str] = None
    ) -> None:
        super().__init__(
            name=name,
            alternateNames=alternateNames,
            description=description,
            id=id,
            meta=meta,
            url=url
        )
        if name is not None:
            self.name = name
        if adds is not None:
            self.adds = adds
        if extends is not None:
            self.extends = extends
        if removes is not None:
            self.removes = removes
        if source is not None:
            self.source = source


class Figure(CreativeWork):
    """
    Encapsulates one or more images, videos, tables, etc, and provides captions
    and labels for them.
    """

    caption: Optional[Array["Node"]] = None
    label: Optional[str] = None

    def __init__(
        self,
        alternateNames: Optional[Array[str]] = None,
        authors: Optional[Array[Union["Person", "Organization"]]] = None,
        caption: Optional[Array["Node"]] = None,
        content: Optional[Array["Node"]] = None,
        dateCreated: Optional[str] = None,
        dateModified: Optional[str] = None,
        datePublished: Optional[str] = None,
        description: Optional[str] = None,
        editors: Optional[Array["Person"]] = None,
        funders: Optional[Array[Union["Person", "Organization"]]] = None,
        id: Optional[str] = None,
        isPartOf: Optional["CreativeWorkTypes"] = None,
        label: Optional[str] = None,
        licenses: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        parts: Optional[Array["CreativeWorkTypes"]] = None,
        publisher: Optional[Union["Person", "Organization"]] = None,
        references: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        text: Optional[str] = None,
        title: Optional[str] = None,
        url: Optional[str] = None,
        version: Optional[Union[str, float]] = None
    ) -> None:
        super().__init__(
            alternateNames=alternateNames,
            authors=authors,
            content=content,
            dateCreated=dateCreated,
            dateModified=dateModified,
            datePublished=datePublished,
            description=description,
            editors=editors,
            funders=funders,
            id=id,
            isPartOf=isPartOf,
            licenses=licenses,
            meta=meta,
            name=name,
            parts=parts,
            publisher=publisher,
            references=references,
            text=text,
            title=title,
            url=url,
            version=version
        )
        if caption is not None:
            self.caption = caption
        if label is not None:
            self.label = label


class Function(Entity):
    """
    A function with a name, which might take Parameters and return a value of a
    certain type.
    """

    name: str
    parameters: Optional[Array["Parameter"]] = None
    returns: Optional["SchemaTypes"] = None

    def __init__(
        self,
        name: str,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
        parameters: Optional[Array["Parameter"]] = None,
        returns: Optional["SchemaTypes"] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if name is not None:
            self.name = name
        if parameters is not None:
            self.parameters = parameters
        if returns is not None:
            self.returns = returns


class Heading(Entity):
    """Heading"""

    content: Array["InlineContent"]
    depth: float

    def __init__(
        self,
        content: Array["InlineContent"],
        depth: float,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if content is not None:
            self.content = content
        if depth is not None:
            self.depth = depth


class ImageObject(MediaObject):
    """An image file."""

    caption: Optional[str] = None
    thumbnail: Optional["ImageObject"] = None

    def __init__(
        self,
        contentUrl: str,
        alternateNames: Optional[Array[str]] = None,
        authors: Optional[Array[Union["Person", "Organization"]]] = None,
        bitrate: Optional[float] = None,
        caption: Optional[str] = None,
        content: Optional[Array["Node"]] = None,
        contentSize: Optional[float] = None,
        dateCreated: Optional[str] = None,
        dateModified: Optional[str] = None,
        datePublished: Optional[str] = None,
        description: Optional[str] = None,
        editors: Optional[Array["Person"]] = None,
        embedUrl: Optional[str] = None,
        format: Optional[str] = None,
        funders: Optional[Array[Union["Person", "Organization"]]] = None,
        id: Optional[str] = None,
        isPartOf: Optional["CreativeWorkTypes"] = None,
        licenses: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        parts: Optional[Array["CreativeWorkTypes"]] = None,
        publisher: Optional[Union["Person", "Organization"]] = None,
        references: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        text: Optional[str] = None,
        thumbnail: Optional["ImageObject"] = None,
        title: Optional[str] = None,
        url: Optional[str] = None,
        version: Optional[Union[str, float]] = None
    ) -> None:
        super().__init__(
            contentUrl=contentUrl,
            alternateNames=alternateNames,
            authors=authors,
            bitrate=bitrate,
            content=content,
            contentSize=contentSize,
            dateCreated=dateCreated,
            dateModified=dateModified,
            datePublished=datePublished,
            description=description,
            editors=editors,
            embedUrl=embedUrl,
            format=format,
            funders=funders,
            id=id,
            isPartOf=isPartOf,
            licenses=licenses,
            meta=meta,
            name=name,
            parts=parts,
            publisher=publisher,
            references=references,
            text=text,
            title=title,
            url=url,
            version=version
        )
        if caption is not None:
            self.caption = caption
        if thumbnail is not None:
            self.thumbnail = thumbnail


class Include(Entity):
    """
    A directive to include content from an external source (e.g. file, URL) or
    content.
    """

    source: str
    content: Optional[Array["Node"]] = None
    hash: Optional[str] = None
    mediaType: Optional[str] = None

    def __init__(
        self,
        source: str,
        content: Optional[Array["Node"]] = None,
        hash: Optional[str] = None,
        id: Optional[str] = None,
        mediaType: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if source is not None:
            self.source = source
        if content is not None:
            self.content = content
        if hash is not None:
            self.hash = hash
        if mediaType is not None:
            self.mediaType = mediaType


class NumberSchema(Entity):
    """A schema specifying the constraints on a numeric node."""

    exclusiveMaximum: Optional[float] = None
    exclusiveMinimum: Optional[float] = None
    maximum: Optional[float] = None
    minimum: Optional[float] = None
    multipleOf: Optional[float] = None

    def __init__(
        self,
        exclusiveMaximum: Optional[float] = None,
        exclusiveMinimum: Optional[float] = None,
        id: Optional[str] = None,
        maximum: Optional[float] = None,
        meta: Optional[Dict[str, Any]] = None,
        minimum: Optional[float] = None,
        multipleOf: Optional[float] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if exclusiveMaximum is not None:
            self.exclusiveMaximum = exclusiveMaximum
        if exclusiveMinimum is not None:
            self.exclusiveMinimum = exclusiveMinimum
        if maximum is not None:
            self.maximum = maximum
        if minimum is not None:
            self.minimum = minimum
        if multipleOf is not None:
            self.multipleOf = multipleOf


class IntegerSchema(NumberSchema):
    """A schema specifying the constraints on an integer node."""

    def __init__(
        self,
        exclusiveMaximum: Optional[float] = None,
        exclusiveMinimum: Optional[float] = None,
        id: Optional[str] = None,
        maximum: Optional[float] = None,
        meta: Optional[Dict[str, Any]] = None,
        minimum: Optional[float] = None,
        multipleOf: Optional[float] = None
    ) -> None:
        super().__init__(
            exclusiveMaximum=exclusiveMaximum,
            exclusiveMinimum=exclusiveMinimum,
            id=id,
            maximum=maximum,
            meta=meta,
            minimum=minimum,
            multipleOf=multipleOf
        )



class Link(Entity):
    """
    A hyperlink to other pages, sections within the same document, resources,
    or any URL.
    """

    content: Array["InlineContent"]
    target: str
    relation: Optional[str] = None
    title: Optional[str] = None

    def __init__(
        self,
        content: Array["InlineContent"],
        target: str,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
        relation: Optional[str] = None,
        title: Optional[str] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if content is not None:
            self.content = content
        if target is not None:
            self.target = target
        if relation is not None:
            self.relation = relation
        if title is not None:
            self.title = title


class List(Entity):
    """A list of items."""

    items: Array["ListItem"]
    order: Optional["EItemListOrder"] = None

    def __init__(
        self,
        items: Array["ListItem"],
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
        order: Optional["EItemListOrder"] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if items is not None:
            self.items = items
        if order is not None:
            self.order = order


class ListItem(Entity):
    """A single item in a list."""

    content: Array["Node"]
    checked: Optional[bool] = None

    def __init__(
        self,
        content: Array["Node"],
        checked: Optional[bool] = None,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if content is not None:
            self.content = content
        if checked is not None:
            self.checked = checked


class Mount(Thing):
    """Describes a volume mount from a host to container."""

    mountDestination: str
    mountOptions: Optional[Array[str]] = None
    mountSource: Optional[str] = None
    mountType: Optional[str] = None

    def __init__(
        self,
        mountDestination: str,
        alternateNames: Optional[Array[str]] = None,
        description: Optional[str] = None,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
        mountOptions: Optional[Array[str]] = None,
        mountSource: Optional[str] = None,
        mountType: Optional[str] = None,
        name: Optional[str] = None,
        url: Optional[str] = None
    ) -> None:
        super().__init__(
            alternateNames=alternateNames,
            description=description,
            id=id,
            meta=meta,
            name=name,
            url=url
        )
        if mountDestination is not None:
            self.mountDestination = mountDestination
        if mountOptions is not None:
            self.mountOptions = mountOptions
        if mountSource is not None:
            self.mountSource = mountSource
        if mountType is not None:
            self.mountType = mountType


class Organization(Thing):
    """An organization such as a school, NGO, corporation, club, etc."""

    address: Optional[str] = None
    brands: Optional[Array["Brand"]] = None
    contactPoints: Optional[Array["ContactPoint"]] = None
    departments: Optional[Array["Organization"]] = None
    funders: Optional[Array[Union["Organization", "Person"]]] = None
    legalName: Optional[str] = None
    parentOrganization: Optional["Organization"] = None

    def __init__(
        self,
        address: Optional[str] = None,
        alternateNames: Optional[Array[str]] = None,
        brands: Optional[Array["Brand"]] = None,
        contactPoints: Optional[Array["ContactPoint"]] = None,
        departments: Optional[Array["Organization"]] = None,
        description: Optional[str] = None,
        funders: Optional[Array[Union["Organization", "Person"]]] = None,
        id: Optional[str] = None,
        legalName: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        parentOrganization: Optional["Organization"] = None,
        url: Optional[str] = None
    ) -> None:
        super().__init__(
            alternateNames=alternateNames,
            description=description,
            id=id,
            meta=meta,
            name=name,
            url=url
        )
        if address is not None:
            self.address = address
        if brands is not None:
            self.brands = brands
        if contactPoints is not None:
            self.contactPoints = contactPoints
        if departments is not None:
            self.departments = departments
        if funders is not None:
            self.funders = funders
        if legalName is not None:
            self.legalName = legalName
        if parentOrganization is not None:
            self.parentOrganization = parentOrganization


class Paragraph(Entity):
    """Paragraph"""

    content: Array["InlineContent"]

    def __init__(
        self,
        content: Array["InlineContent"],
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if content is not None:
            self.content = content


class Variable(Entity):
    """A variable that can be set and used in code."""

    name: str
    default: Optional["Node"] = None
    required: Optional[bool] = None
    schema: Optional["SchemaTypes"] = None

    def __init__(
        self,
        name: str,
        default: Optional["Node"] = None,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
        required: Optional[bool] = None,
        schema: Optional["SchemaTypes"] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if name is not None:
            self.name = name
        if default is not None:
            self.default = default
        if required is not None:
            self.required = required
        if schema is not None:
            self.schema = schema


class Parameter(Variable):
    """A parameter that can be set and used in evaluated code."""

    default: Optional["Node"] = None
    extends: Optional[bool] = None
    repeats: Optional[bool] = None
    required: Optional[bool] = None

    def __init__(
        self,
        name: str,
        default: Optional["Node"] = None,
        extends: Optional[bool] = None,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
        repeats: Optional[bool] = None,
        required: Optional[bool] = None,
        schema: Optional["SchemaTypes"] = None
    ) -> None:
        super().__init__(
            name=name,
            id=id,
            meta=meta,
            schema=schema
        )
        if default is not None:
            self.default = default
        if extends is not None:
            self.extends = extends
        if repeats is not None:
            self.repeats = repeats
        if required is not None:
            self.required = required


class Periodical(CreativeWork):
    """A periodical publication."""

    dateEnd: Optional[str] = None
    dateStart: Optional[str] = None
    issn: Optional[Array[str]] = None

    def __init__(
        self,
        alternateNames: Optional[Array[str]] = None,
        authors: Optional[Array[Union["Person", "Organization"]]] = None,
        content: Optional[Array["Node"]] = None,
        dateCreated: Optional[str] = None,
        dateEnd: Optional[str] = None,
        dateModified: Optional[str] = None,
        datePublished: Optional[str] = None,
        dateStart: Optional[str] = None,
        description: Optional[str] = None,
        editors: Optional[Array["Person"]] = None,
        funders: Optional[Array[Union["Person", "Organization"]]] = None,
        id: Optional[str] = None,
        isPartOf: Optional["CreativeWorkTypes"] = None,
        issn: Optional[Array[str]] = None,
        licenses: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        parts: Optional[Array["CreativeWorkTypes"]] = None,
        publisher: Optional[Union["Person", "Organization"]] = None,
        references: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        text: Optional[str] = None,
        title: Optional[str] = None,
        url: Optional[str] = None,
        version: Optional[Union[str, float]] = None
    ) -> None:
        super().__init__(
            alternateNames=alternateNames,
            authors=authors,
            content=content,
            dateCreated=dateCreated,
            dateModified=dateModified,
            datePublished=datePublished,
            description=description,
            editors=editors,
            funders=funders,
            id=id,
            isPartOf=isPartOf,
            licenses=licenses,
            meta=meta,
            name=name,
            parts=parts,
            publisher=publisher,
            references=references,
            text=text,
            title=title,
            url=url,
            version=version
        )
        if dateEnd is not None:
            self.dateEnd = dateEnd
        if dateStart is not None:
            self.dateStart = dateStart
        if issn is not None:
            self.issn = issn


class Person(Thing):
    """A person (alive, dead, undead, or fictional)."""

    address: Optional[str] = None
    affiliations: Optional[Array["Organization"]] = None
    emails: Optional[Array[str]] = None
    familyNames: Optional[Array[str]] = None
    funders: Optional[Array[Union["Organization", "Person"]]] = None
    givenNames: Optional[Array[str]] = None
    honorificPrefix: Optional[str] = None
    honorificSuffix: Optional[str] = None
    jobTitle: Optional[str] = None
    memberOf: Optional[Array["Organization"]] = None
    telephoneNumbers: Optional[Array[str]] = None

    def __init__(
        self,
        address: Optional[str] = None,
        affiliations: Optional[Array["Organization"]] = None,
        alternateNames: Optional[Array[str]] = None,
        description: Optional[str] = None,
        emails: Optional[Array[str]] = None,
        familyNames: Optional[Array[str]] = None,
        funders: Optional[Array[Union["Organization", "Person"]]] = None,
        givenNames: Optional[Array[str]] = None,
        honorificPrefix: Optional[str] = None,
        honorificSuffix: Optional[str] = None,
        id: Optional[str] = None,
        jobTitle: Optional[str] = None,
        memberOf: Optional[Array["Organization"]] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        telephoneNumbers: Optional[Array[str]] = None,
        url: Optional[str] = None
    ) -> None:
        super().__init__(
            alternateNames=alternateNames,
            description=description,
            id=id,
            meta=meta,
            name=name,
            url=url
        )
        if address is not None:
            self.address = address
        if affiliations is not None:
            self.affiliations = affiliations
        if emails is not None:
            self.emails = emails
        if familyNames is not None:
            self.familyNames = familyNames
        if funders is not None:
            self.funders = funders
        if givenNames is not None:
            self.givenNames = givenNames
        if honorificPrefix is not None:
            self.honorificPrefix = honorificPrefix
        if honorificSuffix is not None:
            self.honorificSuffix = honorificSuffix
        if jobTitle is not None:
            self.jobTitle = jobTitle
        if memberOf is not None:
            self.memberOf = memberOf
        if telephoneNumbers is not None:
            self.telephoneNumbers = telephoneNumbers


class Product(Thing):
    """
    Any offered product or service. For example, a pair of shoes; a haircut; or
    an episode of a TV show streamed online.
    """

    brand: Optional["Brand"] = None
    logo: Optional[Union[str, "ImageObject"]] = None
    productID: Optional[str] = None

    def __init__(
        self,
        alternateNames: Optional[Array[str]] = None,
        brand: Optional["Brand"] = None,
        description: Optional[str] = None,
        id: Optional[str] = None,
        logo: Optional[Union[str, "ImageObject"]] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        productID: Optional[str] = None,
        url: Optional[str] = None
    ) -> None:
        super().__init__(
            alternateNames=alternateNames,
            description=description,
            id=id,
            meta=meta,
            name=name,
            url=url
        )
        if brand is not None:
            self.brand = brand
        if logo is not None:
            self.logo = logo
        if productID is not None:
            self.productID = productID


class PublicationIssue(CreativeWork):
    """
    A part of a successively published publication such as a periodical or
    publication  volume, often numbered.
    """

    issueNumber: Optional[Union[str, int]] = None
    pageEnd: Optional[Union[str, int]] = None
    pageStart: Optional[Union[str, int]] = None
    pagination: Optional[str] = None

    def __init__(
        self,
        alternateNames: Optional[Array[str]] = None,
        authors: Optional[Array[Union["Person", "Organization"]]] = None,
        content: Optional[Array["Node"]] = None,
        dateCreated: Optional[str] = None,
        dateModified: Optional[str] = None,
        datePublished: Optional[str] = None,
        description: Optional[str] = None,
        editors: Optional[Array["Person"]] = None,
        funders: Optional[Array[Union["Person", "Organization"]]] = None,
        id: Optional[str] = None,
        isPartOf: Optional["CreativeWorkTypes"] = None,
        issueNumber: Optional[Union[str, int]] = None,
        licenses: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        pageEnd: Optional[Union[str, int]] = None,
        pageStart: Optional[Union[str, int]] = None,
        pagination: Optional[str] = None,
        parts: Optional[Array["CreativeWorkTypes"]] = None,
        publisher: Optional[Union["Person", "Organization"]] = None,
        references: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        text: Optional[str] = None,
        title: Optional[str] = None,
        url: Optional[str] = None,
        version: Optional[Union[str, float]] = None
    ) -> None:
        super().__init__(
            alternateNames=alternateNames,
            authors=authors,
            content=content,
            dateCreated=dateCreated,
            dateModified=dateModified,
            datePublished=datePublished,
            description=description,
            editors=editors,
            funders=funders,
            id=id,
            isPartOf=isPartOf,
            licenses=licenses,
            meta=meta,
            name=name,
            parts=parts,
            publisher=publisher,
            references=references,
            text=text,
            title=title,
            url=url,
            version=version
        )
        if issueNumber is not None:
            self.issueNumber = issueNumber
        if pageEnd is not None:
            self.pageEnd = pageEnd
        if pageStart is not None:
            self.pageStart = pageStart
        if pagination is not None:
            self.pagination = pagination


class PublicationVolume(CreativeWork):
    """
    A part of a successively published publication such as a periodical or
    multi-volume work.
    """

    pageEnd: Optional[Union[str, int]] = None
    pageStart: Optional[Union[str, int]] = None
    pagination: Optional[str] = None
    volumeNumber: Optional[Union[str, int]] = None

    def __init__(
        self,
        alternateNames: Optional[Array[str]] = None,
        authors: Optional[Array[Union["Person", "Organization"]]] = None,
        content: Optional[Array["Node"]] = None,
        dateCreated: Optional[str] = None,
        dateModified: Optional[str] = None,
        datePublished: Optional[str] = None,
        description: Optional[str] = None,
        editors: Optional[Array["Person"]] = None,
        funders: Optional[Array[Union["Person", "Organization"]]] = None,
        id: Optional[str] = None,
        isPartOf: Optional["CreativeWorkTypes"] = None,
        licenses: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        pageEnd: Optional[Union[str, int]] = None,
        pageStart: Optional[Union[str, int]] = None,
        pagination: Optional[str] = None,
        parts: Optional[Array["CreativeWorkTypes"]] = None,
        publisher: Optional[Union["Person", "Organization"]] = None,
        references: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        text: Optional[str] = None,
        title: Optional[str] = None,
        url: Optional[str] = None,
        version: Optional[Union[str, float]] = None,
        volumeNumber: Optional[Union[str, int]] = None
    ) -> None:
        super().__init__(
            alternateNames=alternateNames,
            authors=authors,
            content=content,
            dateCreated=dateCreated,
            dateModified=dateModified,
            datePublished=datePublished,
            description=description,
            editors=editors,
            funders=funders,
            id=id,
            isPartOf=isPartOf,
            licenses=licenses,
            meta=meta,
            name=name,
            parts=parts,
            publisher=publisher,
            references=references,
            text=text,
            title=title,
            url=url,
            version=version
        )
        if pageEnd is not None:
            self.pageEnd = pageEnd
        if pageStart is not None:
            self.pageStart = pageStart
        if pagination is not None:
            self.pagination = pagination
        if volumeNumber is not None:
            self.volumeNumber = volumeNumber


class Quote(Mark):
    """Inline, quoted content."""

    citation: Optional[str] = None

    def __init__(
        self,
        content: Array["InlineContent"],
        citation: Optional[str] = None,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            content=content,
            id=id,
            meta=meta
        )
        if citation is not None:
            self.citation = citation


class QuoteBlock(Entity):
    """A section quoted from somewhere else."""

    content: Array["BlockContent"]
    citation: Optional[str] = None

    def __init__(
        self,
        content: Array["BlockContent"],
        citation: Optional[str] = None,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if content is not None:
            self.content = content
        if citation is not None:
            self.citation = citation


class ResourceParameters(Thing):
    """
    Describes limits or requested amounts for a particular resource (e.g.
    memory or CPU).
    """

    resourceLimit: Optional[float] = None
    resourceRequested: Optional[float] = None

    def __init__(
        self,
        alternateNames: Optional[Array[str]] = None,
        description: Optional[str] = None,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        resourceLimit: Optional[float] = None,
        resourceRequested: Optional[float] = None,
        url: Optional[str] = None
    ) -> None:
        super().__init__(
            alternateNames=alternateNames,
            description=description,
            id=id,
            meta=meta,
            name=name,
            url=url
        )
        if resourceLimit is not None:
            self.resourceLimit = resourceLimit
        if resourceRequested is not None:
            self.resourceRequested = resourceRequested


class SoftwareApplication(CreativeWork):
    """A software application."""

    softwareRequirements: Optional[Array["SoftwareApplication"]] = None
    softwareVersion: Optional[str] = None

    def __init__(
        self,
        alternateNames: Optional[Array[str]] = None,
        authors: Optional[Array[Union["Person", "Organization"]]] = None,
        content: Optional[Array["Node"]] = None,
        dateCreated: Optional[str] = None,
        dateModified: Optional[str] = None,
        datePublished: Optional[str] = None,
        description: Optional[str] = None,
        editors: Optional[Array["Person"]] = None,
        funders: Optional[Array[Union["Person", "Organization"]]] = None,
        id: Optional[str] = None,
        isPartOf: Optional["CreativeWorkTypes"] = None,
        licenses: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        parts: Optional[Array["CreativeWorkTypes"]] = None,
        publisher: Optional[Union["Person", "Organization"]] = None,
        references: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        softwareRequirements: Optional[Array["SoftwareApplication"]] = None,
        softwareVersion: Optional[str] = None,
        text: Optional[str] = None,
        title: Optional[str] = None,
        url: Optional[str] = None,
        version: Optional[Union[str, float]] = None
    ) -> None:
        super().__init__(
            alternateNames=alternateNames,
            authors=authors,
            content=content,
            dateCreated=dateCreated,
            dateModified=dateModified,
            datePublished=datePublished,
            description=description,
            editors=editors,
            funders=funders,
            id=id,
            isPartOf=isPartOf,
            licenses=licenses,
            meta=meta,
            name=name,
            parts=parts,
            publisher=publisher,
            references=references,
            text=text,
            title=title,
            url=url,
            version=version
        )
        if softwareRequirements is not None:
            self.softwareRequirements = softwareRequirements
        if softwareVersion is not None:
            self.softwareVersion = softwareVersion


class SoftwareSession(Thing):
    """
    Represents a runtime session with the resources and image that is required
    by software to execute.
    """

    environment: "Environment"
    cpuResource: Optional["ResourceParameters"] = None
    memoryResource: Optional["ResourceParameters"] = None
    volumeMounts: Optional[Array["Mount"]] = None

    def __init__(
        self,
        environment: "Environment",
        alternateNames: Optional[Array[str]] = None,
        cpuResource: Optional["ResourceParameters"] = None,
        description: Optional[str] = None,
        id: Optional[str] = None,
        memoryResource: Optional["ResourceParameters"] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        url: Optional[str] = None,
        volumeMounts: Optional[Array["Mount"]] = None
    ) -> None:
        super().__init__(
            alternateNames=alternateNames,
            description=description,
            id=id,
            meta=meta,
            name=name,
            url=url
        )
        if environment is not None:
            self.environment = environment
        if cpuResource is not None:
            self.cpuResource = cpuResource
        if memoryResource is not None:
            self.memoryResource = memoryResource
        if volumeMounts is not None:
            self.volumeMounts = volumeMounts


class SoftwareSourceCode(CreativeWork):
    """
    Computer programming source code. Example: Full (compile ready) solutions,
    code snippet samples, scripts, templates.
    """

    codeRepository: Optional[str] = None
    codeSampleType: Optional[str] = None
    maintainers: Optional[Array[Union["Organization", "Person"]]] = None
    programmingLanguage: Optional[str] = None
    runtimePlatform: Optional[Array[str]] = None
    softwareRequirements: Optional[Array[Union["SoftwareSourceCode", "SoftwareApplication", str]]] = None
    targetProducts: Optional[Array["SoftwareApplication"]] = None

    def __init__(
        self,
        alternateNames: Optional[Array[str]] = None,
        authors: Optional[Array[Union["Person", "Organization"]]] = None,
        codeRepository: Optional[str] = None,
        codeSampleType: Optional[str] = None,
        content: Optional[Array["Node"]] = None,
        dateCreated: Optional[str] = None,
        dateModified: Optional[str] = None,
        datePublished: Optional[str] = None,
        description: Optional[str] = None,
        editors: Optional[Array["Person"]] = None,
        funders: Optional[Array[Union["Person", "Organization"]]] = None,
        id: Optional[str] = None,
        isPartOf: Optional["CreativeWorkTypes"] = None,
        licenses: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        maintainers: Optional[Array[Union["Organization", "Person"]]] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        parts: Optional[Array["CreativeWorkTypes"]] = None,
        programmingLanguage: Optional[str] = None,
        publisher: Optional[Union["Person", "Organization"]] = None,
        references: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        runtimePlatform: Optional[Array[str]] = None,
        softwareRequirements: Optional[Array[Union["SoftwareSourceCode", "SoftwareApplication", str]]] = None,
        targetProducts: Optional[Array["SoftwareApplication"]] = None,
        text: Optional[str] = None,
        title: Optional[str] = None,
        url: Optional[str] = None,
        version: Optional[Union[str, float]] = None
    ) -> None:
        super().__init__(
            alternateNames=alternateNames,
            authors=authors,
            content=content,
            dateCreated=dateCreated,
            dateModified=dateModified,
            datePublished=datePublished,
            description=description,
            editors=editors,
            funders=funders,
            id=id,
            isPartOf=isPartOf,
            licenses=licenses,
            meta=meta,
            name=name,
            parts=parts,
            publisher=publisher,
            references=references,
            text=text,
            title=title,
            url=url,
            version=version
        )
        if codeRepository is not None:
            self.codeRepository = codeRepository
        if codeSampleType is not None:
            self.codeSampleType = codeSampleType
        if maintainers is not None:
            self.maintainers = maintainers
        if programmingLanguage is not None:
            self.programmingLanguage = programmingLanguage
        if runtimePlatform is not None:
            self.runtimePlatform = runtimePlatform
        if softwareRequirements is not None:
            self.softwareRequirements = softwareRequirements
        if targetProducts is not None:
            self.targetProducts = targetProducts


class StringSchema(Entity):
    """A schema specifying constraints on a string node."""

    maxLength: Optional[float] = None
    minLength: Optional[float] = None
    pattern: Optional[str] = None

    def __init__(
        self,
        id: Optional[str] = None,
        maxLength: Optional[float] = None,
        meta: Optional[Dict[str, Any]] = None,
        minLength: Optional[float] = None,
        pattern: Optional[str] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if maxLength is not None:
            self.maxLength = maxLength
        if minLength is not None:
            self.minLength = minLength
        if pattern is not None:
            self.pattern = pattern


class Strong(Mark):
    """Strongly emphasised content."""

    def __init__(
        self,
        content: Array["InlineContent"],
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            content=content,
            id=id,
            meta=meta
        )



class Subscript(Mark):
    """Subscripted content."""

    def __init__(
        self,
        content: Array["InlineContent"],
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            content=content,
            id=id,
            meta=meta
        )



class Superscript(Mark):
    """Superscripted content."""

    def __init__(
        self,
        content: Array["InlineContent"],
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            content=content,
            id=id,
            meta=meta
        )



class Table(CreativeWork):
    """A table."""

    rows: Array["TableRow"]

    def __init__(
        self,
        rows: Array["TableRow"],
        alternateNames: Optional[Array[str]] = None,
        authors: Optional[Array[Union["Person", "Organization"]]] = None,
        content: Optional[Array["Node"]] = None,
        dateCreated: Optional[str] = None,
        dateModified: Optional[str] = None,
        datePublished: Optional[str] = None,
        description: Optional[str] = None,
        editors: Optional[Array["Person"]] = None,
        funders: Optional[Array[Union["Person", "Organization"]]] = None,
        id: Optional[str] = None,
        isPartOf: Optional["CreativeWorkTypes"] = None,
        licenses: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        parts: Optional[Array["CreativeWorkTypes"]] = None,
        publisher: Optional[Union["Person", "Organization"]] = None,
        references: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        text: Optional[str] = None,
        title: Optional[str] = None,
        url: Optional[str] = None,
        version: Optional[Union[str, float]] = None
    ) -> None:
        super().__init__(
            alternateNames=alternateNames,
            authors=authors,
            content=content,
            dateCreated=dateCreated,
            dateModified=dateModified,
            datePublished=datePublished,
            description=description,
            editors=editors,
            funders=funders,
            id=id,
            isPartOf=isPartOf,
            licenses=licenses,
            meta=meta,
            name=name,
            parts=parts,
            publisher=publisher,
            references=references,
            text=text,
            title=title,
            url=url,
            version=version
        )
        if rows is not None:
            self.rows = rows


class TableCell(Entity):
    """A cell within a `Table`."""

    content: Array["InlineContent"]
    colspan: Optional[int] = None
    kind: Optional["ETableCellKind"] = None
    name: Optional[str] = None
    rowspan: Optional[int] = None

    def __init__(
        self,
        content: Array["InlineContent"],
        colspan: Optional[int] = None,
        id: Optional[str] = None,
        kind: Optional["ETableCellKind"] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        rowspan: Optional[int] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if content is not None:
            self.content = content
        if colspan is not None:
            self.colspan = colspan
        if kind is not None:
            self.kind = kind
        if name is not None:
            self.name = name
        if rowspan is not None:
            self.rowspan = rowspan


class TableRow(Entity):
    """A row within a Table."""

    cells: Array["TableCell"]
    kind: Optional["ETableRowKind"] = None

    def __init__(
        self,
        cells: Array["TableCell"],
        id: Optional[str] = None,
        kind: Optional["ETableRowKind"] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if cells is not None:
            self.cells = cells
        if kind is not None:
            self.kind = kind


class ThematicBreak(Entity):
    """
    A thematic break, such as a scene change in a story, a transition to
    another topic, or a new document.
    """

    def __init__(
        self,
        id: Optional[str] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )



class TupleSchema(Entity):
    """A schema specifying constraints on an array of heterogeneous items."""

    items: Optional[Array["SchemaTypes"]] = None

    def __init__(
        self,
        id: Optional[str] = None,
        items: Optional[Array["SchemaTypes"]] = None,
        meta: Optional[Dict[str, Any]] = None
    ) -> None:
        super().__init__(
            id=id,
            meta=meta
        )
        if items is not None:
            self.items = items


class VideoObject(MediaObject):
    """A video file."""

    caption: Optional[str] = None
    thumbnail: Optional["ImageObject"] = None
    transcript: Optional[str] = None

    def __init__(
        self,
        contentUrl: str,
        alternateNames: Optional[Array[str]] = None,
        authors: Optional[Array[Union["Person", "Organization"]]] = None,
        bitrate: Optional[float] = None,
        caption: Optional[str] = None,
        content: Optional[Array["Node"]] = None,
        contentSize: Optional[float] = None,
        dateCreated: Optional[str] = None,
        dateModified: Optional[str] = None,
        datePublished: Optional[str] = None,
        description: Optional[str] = None,
        editors: Optional[Array["Person"]] = None,
        embedUrl: Optional[str] = None,
        format: Optional[str] = None,
        funders: Optional[Array[Union["Person", "Organization"]]] = None,
        id: Optional[str] = None,
        isPartOf: Optional["CreativeWorkTypes"] = None,
        licenses: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        meta: Optional[Dict[str, Any]] = None,
        name: Optional[str] = None,
        parts: Optional[Array["CreativeWorkTypes"]] = None,
        publisher: Optional[Union["Person", "Organization"]] = None,
        references: Optional[Array[Union[str, "CreativeWorkTypes"]]] = None,
        text: Optional[str] = None,
        thumbnail: Optional["ImageObject"] = None,
        title: Optional[str] = None,
        transcript: Optional[str] = None,
        url: Optional[str] = None,
        version: Optional[Union[str, float]] = None
    ) -> None:
        super().__init__(
            contentUrl=contentUrl,
            alternateNames=alternateNames,
            authors=authors,
            bitrate=bitrate,
            content=content,
            contentSize=contentSize,
            dateCreated=dateCreated,
            dateModified=dateModified,
            datePublished=datePublished,
            description=description,
            editors=editors,
            embedUrl=embedUrl,
            format=format,
            funders=funders,
            id=id,
            isPartOf=isPartOf,
            licenses=licenses,
            meta=meta,
            name=name,
            parts=parts,
            publisher=publisher,
            references=references,
            text=text,
            title=title,
            url=url,
            version=version
        )
        if caption is not None:
            self.caption = caption
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if transcript is not None:
            self.transcript = transcript


"""
Union type for valid block content.
"""
BlockContent = Union["CodeBlock", "CodeChunk", "Heading", "List", "ListItem", "Paragraph", "QuoteBlock", "Table", "ThematicBreak"]


"""
Union type for call CreativeWork types.
"""
CreativeWorkTypes = Union["CreativeWork", "Article", "AudioObject", "Collection", "Datatable", "Figure", "ImageObject", "MediaObject", "Periodical", "PublicationIssue", "PublicationVolume", "SoftwareApplication", "SoftwareSourceCode", "Table", "VideoObject"]


"""
Union type for valid inline content.
"""
InlineContent = Union[None, bool, int, float, str, "CodeFragment", "CodeExpression", "Delete", "Emphasis", "ImageObject", "Link", "Quote", "Strong", "Subscript", "Superscript", "Cite", "CiteGroup"]


"""
Union type for all valid nodes.
"""
Node = Union[None, bool, float, int, str, Array[Any], Dict[str, Any], "Entity"]


"""
Union type for all data schemas.
"""
SchemaTypes = Union["ConstantSchema", "EnumSchema", "BooleanSchema", "NumberSchema", "IntegerSchema", "StringSchema", "ArraySchema", "TupleSchema"]

